<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>todolist</title>
</head>
<body>
    <div id="root">
        <input type="text" v-model="inputValue" />{{inputValue}}
        <button v-on:click="handleBtnClick">提交</button>
        <ul>
            <!-- 数组循环的时候将循环的item和index交给自定义属性，然后再通过v-bind动态的传值给子组件 -->
            <todo-item v-bind:content="item"
                       v-bind:index="index"
                       v-for="(item, index) in list"
                       @delete="handleItemDelete"></todo-item>
        </ul>
    </div>
    <script src="vue.js"></script>
    <script type="text/javascript">
        // 全局注册
        // Vue.component('TodoItem', {
        //     // 接收外界传入的值
        //     props: ['content'],
        //     template: '<li>{{content}}</li>'
        // })

        // 局部注册子组件
        var TodoItem = {
            // 接收外界传入的值，相当于父组件的data
            props: ['content', 'index'],
            template: '<li @click="handleItemClick">{{content}}--{{index}}</li>',
            methods: {
                handleItemClick: function() {
                    //向外传递自定义事件，需要父组件进行监听
                    // 父组件监听到了传递出去的自定义事件，就会进行相应的处理
                    // 参数：自定义事件，传递参数
                    this.$emit("delete", this.index)
                }
            }
        }
        var vm = new Vue({
            el: '#root',
            components: {
                'todo-item': TodoItem
            },
            data: {
                inputValue: '',
                list: []
            },
            methods: {
                handleBtnClick: function() {
                    var inputCont = this.inputValue;
                    if (inputCont == '') {
                        alert('需要输入内容');
                    } else {
                        this.list.push(inputCont);
                        this.inputValue = '';
                    }
                    
                },
                // 删除项目
                handleItemDelete: function(index) {
                    this.list.splice(index, 1);
                }
            }
        });
    </script>
</body>
</html>
